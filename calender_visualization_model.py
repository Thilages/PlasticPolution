# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P5_9Z2bpqHGeuk7U8q1L_ZWjIxGT9rkW
"""

# Step 1: Upload the CSV file in Colab
from google.colab import files

# Upload synthetic_rare_fish_data.csv
uploaded = files.upload()

# Step 2: Import Libraries and Load the Dataset
import pandas as pd
import calendar
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
df = pd.read_csv("synthetic_rare_fish_data.csv")

# Display the column names to verify them (optional)
print("Column Names:", df.columns)

# Step 3: Filter Data for Endangered and Critical Species in Goa
location_filter = "Goa"
status_filter = ["Endangered", "Critical"]

df_goa = df[(df['Location'] == location_filter) & (df['Count (Approx.)'].isin(status_filter))]

# Step 4: Process Data to Identify Restricted Dates for Goa

# Function to determine breeding month based on the description
def determine_month(breeding_period):
    if "Jan" in breeding_period:
        return 1
    elif "Feb" in breeding_period:
        return 2
    elif "Mar" in breeding_period:
        return 3
    elif "Apr" in breeding_period:
        return 4
    elif "May" in breeding_period:
        return 5
    elif "Jun" in breeding_period:
        return 6
    elif "Jul" in breeding_period:
        return 7
    elif "Aug" in breeding_period:
        return 8
    elif "Sep" in breeding_period:
        return 9
    elif "Oct" in breeding_period:
        return 10
    elif "Nov" in breeding_period:
        return 11
    elif "Dec" in breeding_period:
        return 12
    return None  # Default if no match

# Extract restricted dates based on species count and breeding period
def get_restricted_dates(df):
    restricted_dates = {}
    for index, row in df.iterrows():
        month = determine_month(row['Breeding Time'])
        if month:
            species_info = f"{row['Species']} - {row['Location']}"
            if month in restricted_dates:
                restricted_dates[month].append(species_info)
            else:
                restricted_dates[month] = [species_info]
    return restricted_dates

# Get restricted dates for Goa
restricted_dates_goa = get_restricted_dates(df_goa)
restricted_dates_goa  # Check the dictionary of restricted months and species

# Step 5: Create a Calendar Heatmap for Goa Location
def create_calendar_heatmap(restricted_dates, title="Restricted Fishing Calendar"):
    plt.figure(figsize=(14, 8))
    year = 2024  # Example year for the calendar
    for month in range(1, 13):
        plt.subplot(3, 4, month)
        plt.title(calendar.month_name[month])

        # Generate month calendar and mark restricted days
        month_cal = calendar.monthcalendar(year, month)
        heatmap_data = [[0 if day == 0 else (1 if month in restricted_dates else 0)
                         for day in week] for week in month_cal]

        sns.heatmap(heatmap_data, annot=month_cal, fmt="d", cbar=False, cmap="YlOrRd",
                    linewidths=1, linecolor='black', square=True)

    plt.suptitle(title, fontsize=16)
    plt.tight_layout(rect=[0, 0, 1, 0.96])
    plt.show()

create_calendar_heatmap(restricted_dates_goa, title="Goa: Restricted Fishing Periods for Endangered/Critical Species")

# Step 6: Save Restricted Dates to a CSV for Future Use
restricted_dates_goa_df = pd.DataFrame([
    {"Month": month, "Restricted Species": ", ".join(species)} for month, species in restricted_dates_goa.items()
])
restricted_dates_goa_df.to_csv("restricted_dates_goa.csv", index=False)

# Download the CSV file for further use
files.download("restricted_dates_goa.csv")

# Step 1: Filter data for endangered and critical species in Goa as before
location_filter = "Goa"
status_filter = ["Endangered", "Critical"]
df_goa = df[(df['Location'] == location_filter) & (df['Count (Approx.)'].isin(status_filter))]

# Step 2: Bar Chart to Display Count of Each Species in Goa
import matplotlib.pyplot as plt
import seaborn as sns

# Count the number of occurrences of each species in Goa
species_count = df_goa['Species'].value_counts()

# Plot the bar chart
plt.figure(figsize=(12, 6))
sns.barplot(x=species_count.values, y=species_count.index, palette="viridis")
plt.xlabel("Count")
plt.ylabel("Species")
plt.title("Count of Endangered & Critical Species in Goa")
plt.show()

# Step 3: Create Individual Breeding Time Plots for Each Species
# Convert the breeding time to numeric format for easy plotting
def month_to_numeric(breeding_period):
    months = []
    if "Jan" in breeding_period:
        months.append(1)
    if "Feb" in breeding_period:
        months.append(2)
    if "Mar" in breeding_period:
        months.append(3)
    if "Apr" in breeding_period:
        months.append(4)
    if "May" in breeding_period:
        months.append(5)
    if "Jun" in breeding_period:
        months.append(6)
    if "Jul" in breeding_period:
        months.append(7)
    if "Aug" in breeding_period:
        months.append(8)
    if "Sep" in breeding_period:
        months.append(9)
    if "Oct" in breeding_period:
        months.append(10)
    if "Nov" in breeding_period:
        months.append(11)
    if "Dec" in breeding_period:
        months.append(12)
    return months

# Add a column with breeding months as a list of integers for each species
df_goa['Breeding Months'] = df_goa['Breeding Time'].apply(month_to_numeric)

# Plot each species individually to show breeding months
unique_species = df_goa['Species'].unique()

for species in unique_species:
    species_data = df_goa[df_goa['Species'] == species]
    breeding_months = [month for sublist in species_data['Breeding Months'] for month in sublist]  # Flatten the list of months

    plt.figure(figsize=(8, 2))
    sns.histplot(breeding_months, bins=12, color="teal")
    plt.xticks(range(1, 13), calendar.month_abbr[1:13])
    plt.title(f"Breeding Months for {species}")
    plt.xlabel("Month")
    plt.ylabel("Frequency")
    plt.show()

# Install Dash and Plotly if needed
!pip install dash dash_daq plotly pandas

# Import required libraries
import dash
from dash import dcc, html, Input, Output
import dash_daq as daq
import plotly.express as px
import pandas as pd
import calendar

# Load the dataset
df = pd.read_csv("synthetic_rare_fish_data.csv")  # Make sure this file is in your working directory

# Initialize the Dash app
app = dash.Dash(__name__)

# Layout of the app
app.layout = html.Div([
    html.H1("Endangered Fish Species Monitoring Calendar"),

    # Calendar Component
    html.Label("Select a Date Range:"),
    dcc.DatePickerRange(
        id='date-picker-range',
        start_date="2024-01-01",
        end_date="2024-12-31",
        display_format="DD/MM/YYYY"
    ),

    # Dropdown to select a location
    html.Label("Select Location:"),
    dcc.Dropdown(
        id='location-dropdown',
        options=[{'label': loc, 'value': loc} for loc in df['Location'].unique()],
        value='Goa'  # default location
    ),

    # Bar Chart Placeholder
    dcc.Graph(id='species-bar-chart'),

    # Individual Species Breeding Time Placeholder
    html.Div(id='individual-breeding-graphs')
])

# Callback to update the bar chart based on location and date range
@app.callback(
    Output('species-bar-chart', 'figure'),
    [Input('date-picker-range', 'start_date'),
     Input('date-picker-range', 'end_date'),
     Input('location-dropdown', 'value')]
)
def update_bar_chart(start_date, end_date, location):
    # Filter the data based on location and date range
    filtered_df = df[(df['Location'] == location)]

    # Generate a bar chart for species counts in the selected location
    species_count = filtered_df['Species'].value_counts()
    fig = px.bar(
        x=species_count.index,
        y=species_count.values,
        labels={'x': 'Species', 'y': 'Count'},
        title=f"Count of Endangered & Critical Species in {location}"
    )
    return fig

# Callback to generate breeding time plots for each species
@app.callback(
    Output('individual-breeding-graphs', 'children'),
    [Input('location-dropdown', 'value')]
)
def update_individual_species_charts(location):
    # Filter for the selected location
    filtered_df = df[df['Location'] == location]

    # Create a list of figures, one for each species
    figures = []
    for species in filtered_df['Species'].unique():
        species_data = filtered_df[filtered_df['Species'] == species]
        breeding_months = [calendar.month_abbr[month] for months in species_data['Breeding Months'] for month in months]

        # Plotly figure for breeding months
        fig = px.histogram(
            x=breeding_months,
            labels={'x': 'Breeding Month'},
            title=f"Breeding Months for {species}"
        )
        fig.update_layout(bargap=0.2)

        # Add each figure to a new Div
        figures.append(html.Div([
            html.H3(f"{species}"),
            dcc.Graph(figure=fig)
        ]))

    return figures

# Run the Dash app
if __name__ == '__main__':
    app.run_server(debug=True)

import json
import pandas as pd

# Step 1: Upload the CSV file in Colab
from google.colab import files

# Upload synthetic_rare_fish_data.csv
uploaded = files.upload()

# Load your synthetic dataset as before
df = pd.read_csv("synthetic_rare_fish_data.csv")

# Filter for Goa location with endangered and critical species
location_filter = "Goa"
status_filter = ["Endangered", "Critical"]
df_goa = df[(df['Location'] == location_filter) & (df['Count (Approx.)'].isin(status_filter))]

# Process restricted dates
def determine_month(breeding_period):
    months_map = {"Jan": 1, "Feb": 2, "Mar": 3, "Apr": 4, "May": 5, "Jun": 6,
                  "Jul": 7, "Aug": 8, "Sep": 9, "Oct": 10, "Nov": 11, "Dec": 12}
    return [months_map[month] for month in months_map if month in breeding_period]

restricted_dates = {}
for _, row in df_goa.iterrows():
    months = determine_month(row['Breeding Time'])
    for month in months:
        if month not in restricted_dates:
            restricted_dates[month] = []
        restricted_dates[month].append({"species": row['Species'], "location": row['Location']})

# Species count for Goa
species_count = df_goa['Species'].value_counts().to_dict()

# Prepare JSON data
output_data = {
    "restricted_dates": restricted_dates,
    "species_count": species_count
}

# Save as JSON file
with open("output_data.json", "w") as json_file:
    json.dump(output_data, json_file)

# Display JSON content to verify
print(json.dumps(output_data, indent=2))

-------

from google.colab import files
files.download("output_data.json")